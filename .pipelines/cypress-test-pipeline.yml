parameters:
  - name: targetEnvironment
    displayName: 'Target Environment'
    type: string
    default: 'staging'
    values:
      - 'staging'
      - 'staging2'
      - 'staging3'
      - 'staging4'
      - 'staging5'
      - 'staging6'
      - 'staging7'
      - 'staging8'
      - 'staging9'
      - 'production'

  - name: targetRegion
    displayName: 'Target Region'
    type: string
    default: 'us'
    values:
      - 'us'
      - 'eu'
      - 'uk'
  - name: sanity
    displayName: 'Sanity'
    type: boolean
    default: false

  - name: browsername
    displayName: 'Browsername'
    type: string
    default: 'chrome'
    values:
      - 'chrome'

  - name: tags
    displayName: 'Tags'
    type: string
    default: '@all'

trigger:
  batch: true
  branches:
    include:
      - refs/heads/staging
      - refs/heads/production

pool:
  vmImage: ubuntu-latest

variables:
  isManual: $[eq(variables['Build.Reason'], 'Manual')]
  isStage: $[eq(variables['Build.SourceBranch'], 'refs/heads/staging')]
  isProduction: $[eq(variables['Build.SourceBranch'], 'refs/heads/production')]

jobs:

- job: ManualTrigger
  condition: and(succeeded(), eq(variables.isManual, true))
  timeoutInMinutes: 0
  strategy:
    parallel: 3
  steps:
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSource: 'spec'
        versionSpec: '18.x'

    - task: Npm@1
      displayName: 'npm install'
      inputs:
        command: 'custom'
        workingDir: 'tests/cypress/'
        customCommand: 'install --legacy-peer-deps'
    - script: |
        EnvironmentName="${{ parameters.targetEnvironment }}"
        RegionName="${{ parameters.targetRegion }}"
        Tags="${{ parameters.tags }}"
        IFS=',' read -ra ADDR <<< "$Tags"
        formatted_values=()
        # Loop over each value and format it
        for i in "${ADDR[@]}"; do
            # Format the value
            formatted_value="${i}"
            # Add the formatted value to the array
            formatted_values+=("$formatted_value")
        done
        # Join the formatted values with "or"
        result=""
        for ((i=0; i<${#formatted_values[@]}; i++)); do
            if [ $i -eq 0 ]; then
                result="${formatted_values[i]}"
            else
                result="${result} or ${formatted_values[i]}"
            fi
        done
        resultTags=${result}
        if [ "${{ parameters.sanity }}" == True ]; then
            resultTags="@sanity"
        else
          resultTags="$resultTags"
        fi
        #echo "Result tags are:  $resultTags and Tags are $Tags"
        BUILD_BUILDNUMBER=$(Build.BuildNumber)
        BrowserName="${{ parameters.browsername }}"
        commandName1="npx cypress run --record --parallel --ci-build-id $BUILD_BUILDNUMBER --group \"DevOps CI $BUILD_BUILDNUMBER\" --tag \"$EnvironmentName,$RegionName\" --key ee5554f3-5d4c-4342-ada5-55e5de0b6519 --browser $BrowserName --env testingEnvironment=$EnvironmentName,country=$RegionName,tags=\"@$RegionName and $resultTags\""
        echo "Running command: $commandName1"
        echo "##vso[task.setvariable variable=commandName1]$commandName1"
      displayName: 'Prepare command'

    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: 'install nx'

    - task: CmdLine@2
      displayName: 'Execute Cypress Tests for manual trigger ${{ parameters.targetEnvironment }}'
      condition: and(succeeded(), eq(variables.isManual, true))
      env:
        BUILD_BUILDNUMBER: $(Build.BuildNumber)
      inputs:
        script: '$(commandName1)'
        workingDirectory: 'tests/'




#- job: Staging
#  condition: and(succeeded(), eq(variables.isStage, true))
#  timeoutInMinutes: 0
#  steps:
#    - task: Npm@1
#      displayName: 'npm install'
#      inputs:
#        command: 'custom'
#        workingDir: 'tests/cypress/'
#        customCommand: 'install --legacy-peer-deps'
#
#    - task: Npm@1
#      displayName: npm run for stage
#      condition: and(succeeded(), eq(variables.isStage, true))
#      continueOnError: true
#      inputs:
#        command: 'custom'
#        workingDir: 'tests/cypress/'
#        customCommand: 'run stage'
#    - task: Npm@1
#      displayName: npm run for chrome-headed
#      continueOnError: true
#      inputs:
#        command: 'custom'
#        workingDir: 'tests/cypress/'
#        customCommand: 'run chrome-headed'
#
#    - task: Npm@1
#      displayName: npm run for chrome-no-dashboard
#      continueOnError: true
#      inputs:
#        command: 'custom'
#        workingDir: 'tests/cypress/'
#        customCommand: 'run chrome-no-dashboard'
#- job: Production
#  condition: and(succeeded(), eq(variables.isProduction, true))
#  timeoutInMinutes: 0
#  steps:
#    - task: Npm@1
#      displayName: 'npm install'
#      inputs:
#        command: 'custom'
#        workingDir: 'tests/cypress/'
#        customCommand: 'install --legacy-peer-deps'
#
#    - task: Npm@1
#      displayName: npm run for production
#      condition: and(succeeded(), eq(variables.isProduction, true))
#      continueOnError: true
#      inputs:
#        command: 'custom'
#        workingDir: 'tests/cypress/'
#        customCommand: 'run production'

#- job: PublishTestResults
#  dependsOn:
#    - ManualTrigger
#    - Production
#    - Staging
#  condition: or(succeeded('ManualTrigger'), succeeded('Production'), succeeded('Stage'))
#  timeoutInMinutes: 0
#  steps:
#    - task: Npm@1
#      displayName: 'run HTMLReport'
#      inputs:
#        command: 'custom'
#        workingDir: '$(System.DefaultWorkingDirectory)/tests/cucumberHTMLReport/'
#        customCommand: 'run HTMLReport'
#
#    - task: PublishTestResults@2
#      inputs:
#        testResultsFormat: 'JUnit'
#        testResultsFiles: '**/combined.xml'
#        searchFolder: '$(System.DefaultWorkingDirectory)/tests/cucumberHTMLReport/HTMLReport'

